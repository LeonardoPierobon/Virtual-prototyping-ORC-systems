model VIP.Objects.tube_bundle
constant Integer Ncell = 3 "Number of cell elements";
parameter Modelica.SIunits.Length thick "Thickness of the tube";
parameter Modelica.SIunits.ThermalConductivity lambda_wall = 50 "Thermal conductivity of the tube wall";
parameter Modelica.SIunits.SpecificEnthalpy h_in "Inlet specific enthalpy shell side";
parameter Modelica.SIunits.SpecificEnthalpy h_out "Outlet specific enthalpy shell side";
parameter Modelica.SIunits.MassFlowRate mdot "Mass flow rate total";
parameter Real pin "This pin identifies if the fluid is hot or cold";
input Modelica.SIunits.Area Aflow "Cross-sectional area (single tube)";
input Modelica.SIunits.Length Dhyd "Hydraulic Diameter (single tube)";
input Modelica.SIunits.MassFlowRate mdot_pt "Mass flow rate per tube!!!!";
parameter Integer N_passes "Number of tube passes";
parameter Integer layout "Tube layout 1 = triangular, 2 = squared";
parameter Real pitch_f "Tube pitch as a fraction of the outer tube diameter";
input Real N_tubes "Number of tubes in the bundle";

Modelica.SIunits.Area At "Heat transfer area associated to the tubes";
Modelica.SIunits.Length Dhyd_o "Outer Diameter (single tube)";
Modelica.SIunits.ThermalConductivity G_wall;
Modelica.SIunits.AbsolutePressure p_in "Inlet pressure tube side";
Modelica.SIunits.Velocity u[Ncell](start = ones(Ncell)) "Velocities inside the tubes";
Modelica.Media.Interfaces.PartialMedium.Temperature state[1].T "temperature";
Modelica.Media.Interfaces.PartialMedium.VelocityOfSound state[1].a 
  "velocity of sound";
Modelica.SIunits.CubicExpansionCoefficient state[1].beta "isobaric expansion coefficient";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[1].cp 
  "specific heat capacity cp";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[1].cv 
  "specific heat capacity cv";
Modelica.Media.Interfaces.PartialMedium.Density state[1].d "density";
Modelica.Media.Interfaces.PartialMedium.DerDensityByEnthalpy state[1].ddhp 
  "derivative of density wrt enthalpy at constant pressure";
Modelica.Media.Interfaces.PartialMedium.DerDensityByPressure state[1].ddph 
  "derivative of density wrt pressure at constant enthalpy";
Modelica.Media.Interfaces.PartialMedium.DynamicViscosity state[1].eta 
  "dynamic viscosity";
Modelica.Media.Interfaces.PartialMedium.SpecificEnthalpy state[1].h 
  "specific enthalpy";
Modelica.SIunits.Compressibility state[1].kappa "compressibility";
Modelica.Media.Interfaces.PartialMedium.ThermalConductivity state[1].lambda 
  "thermal conductivity";
Modelica.Media.Interfaces.PartialMedium.AbsolutePressure state[1].p "pressure";
Modelica.Media.Interfaces.PartialTwoPhaseMedium.FixedPhase state[1].phase 
  "phase flag: 2 for two-phase, 1 for one-phase";
Modelica.Media.Interfaces.PartialMedium.SpecificEntropy state[1].s 
  "specific entropy";
Modelica.Media.Interfaces.PartialMedium.Temperature state[2].T "temperature";
Modelica.Media.Interfaces.PartialMedium.VelocityOfSound state[2].a 
  "velocity of sound";
Modelica.SIunits.CubicExpansionCoefficient state[2].beta "isobaric expansion coefficient";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[2].cp 
  "specific heat capacity cp";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[2].cv 
  "specific heat capacity cv";
Modelica.Media.Interfaces.PartialMedium.Density state[2].d "density";
Modelica.Media.Interfaces.PartialMedium.DerDensityByEnthalpy state[2].ddhp 
  "derivative of density wrt enthalpy at constant pressure";
Modelica.Media.Interfaces.PartialMedium.DerDensityByPressure state[2].ddph 
  "derivative of density wrt pressure at constant enthalpy";
Modelica.Media.Interfaces.PartialMedium.DynamicViscosity state[2].eta 
  "dynamic viscosity";
Modelica.Media.Interfaces.PartialMedium.SpecificEnthalpy state[2].h 
  "specific enthalpy";
Modelica.SIunits.Compressibility state[2].kappa "compressibility";
Modelica.Media.Interfaces.PartialMedium.ThermalConductivity state[2].lambda 
  "thermal conductivity";
Modelica.Media.Interfaces.PartialMedium.AbsolutePressure state[2].p "pressure";
Modelica.Media.Interfaces.PartialTwoPhaseMedium.FixedPhase state[2].phase 
  "phase flag: 2 for two-phase, 1 for one-phase";
Modelica.Media.Interfaces.PartialMedium.SpecificEntropy state[2].s 
  "specific entropy";
Modelica.Media.Interfaces.PartialMedium.Temperature state[3].T "temperature";
Modelica.Media.Interfaces.PartialMedium.VelocityOfSound state[3].a 
  "velocity of sound";
Modelica.SIunits.CubicExpansionCoefficient state[3].beta "isobaric expansion coefficient";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[3].cp 
  "specific heat capacity cp";
Modelica.Media.Interfaces.PartialMedium.SpecificHeatCapacity state[3].cv 
  "specific heat capacity cv";
Modelica.Media.Interfaces.PartialMedium.Density state[3].d "density";
Modelica.Media.Interfaces.PartialMedium.DerDensityByEnthalpy state[3].ddhp 
  "derivative of density wrt enthalpy at constant pressure";
Modelica.Media.Interfaces.PartialMedium.DerDensityByPressure state[3].ddph 
  "derivative of density wrt pressure at constant enthalpy";
Modelica.Media.Interfaces.PartialMedium.DynamicViscosity state[3].eta 
  "dynamic viscosity";
Modelica.Media.Interfaces.PartialMedium.SpecificEnthalpy state[3].h 
  "specific enthalpy";
Modelica.SIunits.Compressibility state[3].kappa "compressibility";
Modelica.Media.Interfaces.PartialMedium.ThermalConductivity state[3].lambda 
  "thermal conductivity";
Modelica.Media.Interfaces.PartialMedium.AbsolutePressure state[3].p "pressure";
Modelica.Media.Interfaces.PartialTwoPhaseMedium.FixedPhase state[3].phase 
  "phase flag: 2 for two-phase, 1 for one-phase";
Modelica.Media.Interfaces.PartialMedium.SpecificEntropy state[3].s 
  "specific entropy";
Modelica.SIunits.ReynoldsNumber Re[Ncell] "Reynolds number tubes";
Modelica.SIunits.PrandtlNumber Pr[Ncell] "Prandtl number tubes";
Modelica.SIunits.SpecificEnthalpy h[Ncell+1](start = linspace(h_in, h_out, Ncell
  +1)) "Tube stream Ncell+1 enthalpies";
Modelica.SIunits.HeatFlowRate qdot[Ncell] "Heat rate of each cell";
Modelica.SIunits.Length d_b "Bundle Diameter";
Modelica.SIunits.Length clearance "Bundle - shell clearance";

function Modelica.Math.log
  input Real u;
  output Real y;

external "C" y = log(u);
annotation(Library={"ModelicaExternalC"});
end Modelica.Math.log;
function VIP.Media.OneRandomOrganicFluid.setState_ph_Unique1
  input Real p "pressure";
  input Real h "specific enthalpy";
  input Integer phase := 0 "2 for two-phase, 1 for one-phase, 0 if not known";
  output ExternalMedia.Media.BaseClasses.ExternalTwoPhaseMedium.ThermodynamicState 
    state;

external "C" TwoPhaseMedium_setState_ph_C_impl(p, h, phase, state, 
  "Name of the fluid for documentation purposes", "FluidProp.RefProp", 
  "cyclopentane");
annotation(Include="#include \"externalmedialib.h\"", Library={"ExternalMediaLib"},
   IncludeDirectory="C:/Users/lpier/Documents/MyWork/TU_Delft/VIP2/ExternalMedia/Modelica/ExternalMedia 3.2.1/Resources/Include",
   LibraryDirectory="C:/Users/lpier/Documents/MyWork/TU_Delft/VIP2/ExternalMedia/Modelica/ExternalMedia 3.2.1/Resources/Library");
end VIP.Media.OneRandomOrganicFluid.setState_ph_Unique1;
function VIP.Useful_functions.Pure_numbers.Prandtl
  input Real cp;
  input Real eta;
  input Real lambda;
  output Real Pr;

algorithm 
  Pr := cp*eta/lambda;
end VIP.Useful_functions.Pure_numbers.Prandtl;
function VIP.Useful_functions.Pure_numbers.Reynolds
  input Real u;
  input Real d;
  input Real mu;
  input Real d_eq;
  output Real Re;

algorithm 
  Re := u*d*d_eq/mu;
end VIP.Useful_functions.Pure_numbers.Reynolds;
function VIP.Useful_functions.Shell.bundle_diameter
  parameter Integer K_ind[8] = {1, 2, 0, 3, 0, 4, 0, 5};
  parameter Real K[2, 5] = [0.319, 0.249, 0.175, 0.0743, 0.0365; 0.215, 0.156, 
    0.158, 0.0402, 0.0331];
  parameter Real n[2, 5] = [2.142, 2.207, 2.285, 2.499, 2.675; 2.207, 2.291, 
    2.263, 2.617, 2.643];
  input Real N_tubes;
  input Integer N_passes;
  input Real d_eq;
  input Integer layout;
  output Real d_b;

algorithm 
  d_b := d_eq*(N_tubes/K[layout, K_ind[N_passes]])^(1/n[layout, K_ind[N_passes]]);
end VIP.Useful_functions.Shell.bundle_diameter;
function bundle_clearance_Unique2
  input Real d_b "bundle diameter";
  output Real clearance "bundle clearance";

algorithm 
  clearance := 0.001*(10+10*(d_b-0.2));
end bundle_clearance_Unique2;
// Equations and algorithms

  // Component 
  // class VIP.Objects.tube_bundle
    // extends VIP.Objects.tubes
    equation
      Dhyd_o = Dhyd+2*thick;
      G_wall = 2*lambda_wall/log(Dhyd_o/Dhyd);
      for i in (1:Ncell) loop
        qdot[i] = pin*mdot*(h[i]-h[i+1]);
        u[i] = mdot_pt/state[i].d/Aflow;
        state[i] = VIP.Media.OneRandomOrganicFluid.setState_ph_Unique1(p_in, (h[
          i]+h[i+1])/2, 0);
        Re[i] = VIP.Useful_functions.Pure_numbers.Reynolds(u[i], state[i].d, 
          state[i].eta, Dhyd);
        Pr[i] = VIP.Useful_functions.Pure_numbers.Prandtl(state[i].cp, state[i].
          eta, state[i].lambda);
      end for;
    // end of extends 
  equation
    d_b = VIP.Useful_functions.Shell.bundle_diameter(N_tubes, N_passes, Dhyd_o, 
      layout);
    clearance = bundle_clearance_Unique2(d_b);

end VIP.Objects.tube_bundle;
